import React, { useState, useRef, useEffect } from 'react';
import { Send, Settings, Terminal, FileText, Code, Database, Zap } from 'lucide-react';
import { geminiCLIService } from '../services/GeminiCLIService';

interface Message {
  id: string;
  type: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
}

interface GeminiInterfaceProps {
  className?: string;
}

export default function GeminiInterface({ className = '' }: GeminiInterfaceProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'system',
      content: 'SYSTEM INITIALIZED - Gemini CLI Interface v2.0.1\nNeural network status: ONLINE\nQuantum processing: ACTIVE\nReady for user interaction...',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('chat');
  const [isConnected, setIsConnected] = useState(false);
  const chatAreaRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const initializeCLI = async () => {
      const connected = await geminiCLIService.initialize();
      setIsConnected(connected);
      
      if (connected) {
        setMessages(prev => [...prev, {
          id: Date.now().toString(),
          type: 'system',
          content: 'Gemini CLI connection established successfully.\nAll systems operational.',
          timestamp: new Date()
        }]);
      } else {
        setMessages(prev => [...prev, {
          id: Date.now().toString(),
          type: 'system',
          content: 'WARNING: Gemini CLI not found or not accessible.\nRunning in simulation mode.',
          timestamp: new Date()
        }]);
      }
    };

    initializeCLI();
  }, []);

  const scrollToBottom = () => {
    if (chatAreaRef.current) {
      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      let response: string;
      
      if (isConnected) {
        // Use actual Gemini CLI
        const result = await geminiCLIService.chat(inputValue);
        response = result.success ? result.data || 'No response' : result.error || 'Unknown error';
      } else {
        // Fallback simulation
        response = `PROCESSING: ${userMessage.content}\n\nResponse generated by Gemini AI neural network.\nCommand executed successfully.\n\n> Ready for next input...`;
      }

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: response,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: `ERROR: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const menuItems = [
    { id: 'chat', label: 'Neural Chat', icon: Terminal },
    { id: 'files', label: 'File System', icon: FileText },
    { id: 'code', label: 'Code Editor', icon: Code },
    { id: 'data', label: 'Data Analysis', icon: Database },
    { id: 'tools', label: 'AI Tools', icon: Zap }
  ];

  return (
    <div className={`cyberpunk ${className}`} style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      <div className="cyberpunk-header" style={{ padding: '1rem', borderBottom: '2px solid var(--cyber-neon-green)' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
          <div className="cyberpunk-title">GEMINI CLI</div>
          <div className="cyberpunk-status">
            <div className="cyberpunk-status-dot" style={{ 
              background: isConnected ? 'var(--cyber-neon-green)' : 'var(--cyber-neon-pink)' 
            }}></div>
            <span style={{ 
              color: isConnected ? 'var(--cyber-neon-green)' : 'var(--cyber-neon-pink)', 
              fontSize: '12px' 
            }}>
              {isConnected ? 'ONLINE' : 'SIMULATION'}
            </span>
          </div>
          <div style={{ marginLeft: 'auto' }}>
            <button className="cyberpunk-button" style={{ padding: '0.5rem', fontSize: '12px' }}>
              <Settings size={16} />
            </button>
          </div>
        </div>
      </div>

        <div style={{ display: 'flex', flex: 1 }}>
          <div className="cyberpunk-sidebar">
            <div className="cyberpunk-sidebar-title">SYSTEM MENU</div>
            {menuItems.map(item => (
              <div
                key={item.id}
                className={`cyberpunk-menu-item ${activeTab === item.id ? 'active' : ''}`}
                onClick={() => setActiveTab(item.id)}
              >
                <item.icon size={16} style={{ marginRight: '0.5rem' }} />
                {item.label}
              </div>
            ))}

            <div className="cyberpunk-stats">
              <div className="cyberpunk-stats-title">SYSTEM STATS</div>
              <div className="cyberpunk-stat">
                <span className="cyberpunk-stat-label">CPU Usage</span>
                <span className="cyberpunk-stat-value">87%</span>
              </div>
              <div className="cyberpunk-stat">
                <span className="cyberpunk-stat-label">Memory</span>
                <span className="cyberpunk-stat-value">2.4GB</span>
              </div>
              <div className="cyberpunk-stat">
                <span className="cyberpunk-stat-label">Network</span>
                <span className="cyberpunk-stat-value">1.2Gbps</span>
              </div>
              <div className="cyberpunk-stat">
                <span className="cyberpunk-stat-label">AI Cores</span>
                <span className="cyberpunk-stat-value">8/8</span>
              </div>
            </div>
          </div>

          <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
            <div className="cyberpunk-chat-area" ref={chatAreaRef}>
              {messages.map(message => (
                <div key={message.id} className={`cyberpunk-message ${message.type}`}>
                  <div style={{ 
                    color: message.type === 'user' ? 'var(--cyber-neon-pink)' : 
                           message.type === 'assistant' ? 'var(--cyber-neon-green)' : 'var(--cyber-neon-blue)',
                    fontWeight: 'bold',
                    marginBottom: '0.25rem',
                    fontSize: '12px',
                    textTransform: 'uppercase'
                  }}>
                    {message.type === 'user' ? 'USER' : 
                     message.type === 'assistant' ? 'GEMINI AI' : 'SYSTEM'}
                  </div>
                  <div style={{ 
                    color: 'var(--cyber-text)',
                    whiteSpace: 'pre-wrap',
                    fontFamily: 'Share Tech Mono, monospace'
                  }}>
                    {message.content}
                  </div>
                  <div style={{ 
                    color: 'var(--cyber-text-dim)',
                    fontSize: '10px',
                    marginTop: '0.25rem'
                  }}>
                    {message.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="cyberpunk-message assistant">
                  <div style={{ color: 'var(--cyber-neon-green)', fontWeight: 'bold', marginBottom: '0.25rem' }}>
                    GEMINI AI
                  </div>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                    <div className="cyberpunk-loading"></div>
                    <span style={{ color: 'var(--cyber-text)' }}>Processing neural response...</span>
                  </div>
                </div>
              )}
            </div>

            <div className="cyberpunk-input-area">
              <input
                type="text"
                className="cyberpunk-input"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Enter your command or question..."
                disabled={isLoading}
              />
              <button
                className="cyberpunk-button"
                onClick={handleSendMessage}
                disabled={isLoading || !inputValue.trim()}
                style={{ opacity: isLoading || !inputValue.trim() ? 0.5 : 1 }}
              >
                <Send size={16} />
              </button>
            </div>
          </div>
        </div>
    </div>
  );
} 